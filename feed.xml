<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-07-30T19:20:18+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Onur Eken</title><author><name>Onur Eken</name></author><entry><title type="html">Insaat 3D Reconstructor goes live</title><link href="http://localhost:4000/insaat-3d-reconstructor-goes-live" rel="alternate" type="text/html" title="Insaat 3D Reconstructor goes live" /><published>2022-03-10T00:00:00+01:00</published><updated>2022-03-10T00:00:00+01:00</updated><id>http://localhost:4000/insaat-3d-reconstructor-goes-live</id><content type="html" xml:base="http://localhost:4000/insaat-3d-reconstructor-goes-live"><![CDATA[<p>Last several months, I have been working on a side project where I combine 3D computer vision techniques with cloud application development. The result is <a href="https://insaat3d.com" target="_blank"><strong>Insaat 3D Reconstructor</strong></a>, a cloud-native application that makes it easy to reconstruct 3D mesh models from images. This process is also known as photogrammetry.</p>

<div class="jekyll-linkpreview-wrapper">
    <div class="jekyll-linkpreview-wrapper-inner">
        <div class="jekyll-linkpreview-content">
            <div class="jekyll-linkpreview-image">
                <a href="https://www.wikiwand.com/en/Photogrammetry" target="_blank">
                    <img src="/assets/link.png" />
                </a>
            </div>
            <div class="jekyll-linkpreview-body">
                <h4 class="jekyll-linkpreview-title">
                    <a href="https://www.wikiwand.com/en/Photogrammetry" target="_blank"> Photogrammetry | Wikiwand</a>
                </h4>
                <div class="jekyll-linkpreview-description"> Photogrammetry is the science and technology of obtaining reliable information about physical objects and the environment through the process of recording, measuring and interpreting photographic images and patterns of electromagnetic radiant imagery and other phenomena.[1]</div>
            </div>
        </div>
        <div class="jekyll-linkpreview-footer">
            <a href="http://www.wikiwand.com" target="_blank"> www.wikiwand.com</a>
        </div>
    </div>
</div>

<p>There are already several software solutions available for this purpose. However, apart from being free, Insaat also offers convenience for the user. In a nutshell, the benefits are:</p>

<ul>
  <li>You don’t overwhelm your computer with CPU-intensive computations.</li>
  <li>You don’t go through a complex photogrammetry software installation process.</li>
  <li>You don’t need to explore the reconstruction parameter space to fine-tune your reconstruction quality.</li>
</ul>

<p>The user only uploads the images in JPEG format. When the result is available, Insaat notifies via email, and the 3D model can be viewed in the browser. Because Insaat is not a commercial project, it lacks the powerful hardware to accelerate the computations. Therefore it is targeted more towards 3D model hobbyists rather than industry professionals.</p>

<p>I see it as more of a fun tool. For example, you can create a toy 3D model of your car and 3D print this model to decorate your desk. Or let’s say if you are a landlord in Berlin, you can create a 3D model of your flat interior and share it with prospective tenants.</p>

<h1 id="technical-overview">Technical Overview</h1>

<p>Insaat follows a microservices-style architecture consisting of 3 stateless components: <code class="language-plaintext highlighter-rouge">webapp</code>, <code class="language-plaintext highlighter-rouge">backend</code>, <code class="language-plaintext highlighter-rouge">compute</code>.</p>

<center>
    <figure style="display:inline-block;">
        <img width="100%" src="/assets/insaat-goes-live/insaat-architecture.jpg" style="margin-top:20px;margin-right:10px" />
    </figure>
    <i>Application architecture.</i>
    
</center>
<p><br /></p>

<p>The <code class="language-plaintext highlighter-rouge">webapp</code> delivers a single-page application (SPA) written in Angular. This browser client talks to the <code class="language-plaintext highlighter-rouge">backend</code> to perform authentication, fetch data, and create new reconstruction requests. These requests reach <code class="language-plaintext highlighter-rouge">compute</code> via the message broker, and as the name implies, <code class="language-plaintext highlighter-rouge">compute</code> does the heavy lifting by using the OpenMVG complete photogrammetry pipeline. Then, <code class="language-plaintext highlighter-rouge">compute</code> publishes the result at the message broker. Throughout the process, binary large objects such as images and models are stored in and served from an AWS S3 bucket.</p>

<h1 id="challenges">Challenges</h1>

<h4 id="1-local-development">1. Local Development</h4>

<p>Right off the bat, I had issues building OpenMVG binaries on my ARM-based computer (M1 Apple Macbook Air). Because many computer vision algorithms lend themselves to parallelization, library authors take advantage of SIMD instructions where possible. However, they seemingly considered SIMD instructions only for AMD 64 architecture CPUs, e.g. SSE, AVX. These are not available in ARM instruction set architecture. Therefore I skimmed through the codebase and disabled parts which use SIMD instructions. I built and published the arm64-based Docker images for <a href="https://hub.docker.com/repository/docker/oeken/openmvg" target="_blank">OpenMVG</a> and <a href="https://hub.docker.com/repository/docker/oeken/openmvs" target="_blank">OpenMVS</a> in my Docker account.</p>

<h4 id="2-building-for-cloud-servers">2. Building for Cloud Servers</h4>

<p>Another similar issue I encountered during the development of Insaat was due to the environment difference between the CI/CD server and the cloud servers. Initially, I built the OpenMVG binaries on the CI/CD machine. Even though the target OS and the architecture (<code class="language-plaintext highlighter-rouge">Linux - amd64</code>) matched with the cloud server machine, running the binaries in the cloud would result in a segmentation fault. After some debugging, I found out that the processor in the CI/CD machine included some of the extended SIMD instructions (e.g. AVX-512) which the cloud server did not support. Therefore running those binaries in the cloud server failed since the instructions were not found. I resolved this problem by building the binaries on the cloud server itself.</p>

<h4 id="3-graceful-compute-service-deployments">3. Graceful Compute Service Deployments</h4>

<p>I use Kubernetes’ Deployment resource to roll out new versions of the applications. However, during my tests, I noticed that a roll-out of a new <code class="language-plaintext highlighter-rouge">compute</code> service would result in lost reconstruction tasks if they were in progress. Which makes a lot of sense because when a <code class="language-plaintext highlighter-rouge">SIGINT</code> signal is sent to the containers in the terminating pods, <code class="language-plaintext highlighter-rouge">compute</code> service only aborts the child processes and gracefully shuts down. However, it did not have any logic to persist the reconstruction tasks. In the next iteration, I implemented an improved graceful shutdown where the <code class="language-plaintext highlighter-rouge">compute</code> service publishes the incomplete reconstruction tasks back to the message queue so that they can be later picked up by the next <code class="language-plaintext highlighter-rouge">compute</code> service that will go love and connect to the message queue. It works smoothly in practice.</p>

<h4 id="4-going-low-on-memory">4. Going Low on Memory</h4>

<p>After I got everything working well on my computer I was excited… So with high hopes, I went ahead and did my first reconstruction test on the cloud server. The result? <code class="language-plaintext highlighter-rouge">compute</code> pod is killed due to out of memory. Well… after some investigation, I figured out that it never happened on my computer since it uses <strong>swap memory</strong>. Kubernetes pods? Not really. Allowing swap memory is a feature that is recently introduced in <code class="language-plaintext highlighter-rouge">kubelet</code>. While enabling swap could be a solution, I preferred a simpler one. Two ideas to reduce memory consumption:</p>

<ul>
  <li>Limit the number of concurrent reconstruction tasks</li>
  <li>Resize too large images (also speeds up reconstruction tasks)</li>
</ul>

<p>After these changes, the peak memory usage never goes beyond 60%, and the reconstructions speed up by a factor of 4. Concretely, a particular reconstruction task that used to take ~5 minutes now takes 1 minute.</p>

<h1 id="conclusion">Conclusion</h1>

<p>I find developing compute-intensive applications in the cloud exciting because there lurk challenges that are not prevalent in typical CRUD applications. Most likely, I am yet to discover more.</p>]]></content><author><name>Onur Eken</name></author><summary type="html"><![CDATA[A cloud native application that can reconstruct 3D models from images.]]></summary></entry><entry><title type="html">Automate toggling function keys in macOS</title><link href="http://localhost:4000/automate-toggling-fn-key" rel="alternate" type="text/html" title="Automate toggling function keys in macOS" /><published>2021-04-04T00:00:00+02:00</published><updated>2021-04-04T00:00:00+02:00</updated><id>http://localhost:4000/automate-function-key-toggling</id><content type="html" xml:base="http://localhost:4000/automate-toggling-fn-key"><![CDATA[<p>This one is not a coding problem but a productivity tip. I mostly use JetBrain IDEs for programming on macOS. I need frequent access to function keys (<code class="language-plaintext highlighter-rouge">F7</code>, <code class="language-plaintext highlighter-rouge">F8</code>, <code class="language-plaintext highlighter-rouge">F9</code>, etc. ) when I debug some code. Not only those, but also I need access to system function keys very often, to adjust brightness, volume, and to get an overview of open applications, etc.</p>

<center>
    <figure style="display:inline-block;">
        <img width="60%" src="/assets/automate-toggling-fn-key/clion.png" style="margin-top:20px;margin-bottom:30px;margin-right:10px" />
    </figure>
</center>

<p>In this case, being able to quickly toggle the mode of the function keys would be very useful:</p>
<ul>
  <li>Standard function keys (<code class="language-plaintext highlighter-rouge">F1</code>, <code class="language-plaintext highlighter-rouge">F2</code>, etc.)</li>
  <li>System function keys (Adjust brightness, volume etc.)</li>
</ul>

<p>It is possible to do this in System Preferences –&gt; Keyboard, however, it is very slow having to go through these panels.</p>

<p style="text-align: center;"><img src="/assets/automate-toggling-fn-key/keyboard-preferences-annotated.png" alt="Keyboard Preferences" /></p>

<p>Using <strong>Automator</strong> and <strong>BetterTouchTool</strong> programs we can do much better and faster. In Automator, one can write custom scripts in <strong>AppleScript</strong> language to control the system. For example, the following snippet toggles a checkbox in the <strong>Keyboard Preferences</strong> on macOS Big Sur (11.2.2), coincidentally… exactly the one we need.</p>

<script src="https://gist.github.com/oeken/86e1dd95b7f8e8cdc95f41d74bc9e092.js"></script>

<p>Next, create a <strong>macOS workflow</strong> with this script and save it where appropriate.</p>

<p style="text-align: center;"><img src="/assets/automate-toggling-fn-key/automator-annotated.png" alt="Keyboard Preferences" /></p>
<blockquote>
  <p>Automator –&gt; File –&gt; New –&gt; Worfklow –&gt; Run AppleScript.</p>
</blockquote>

<p>Verify that workflow does toggle the function keys by executing the workflow. Next, bind this workflow to a keyboard shortcut using BetterTouchTool.</p>

<p style="text-align: center;"><img src="/assets/automate-toggling-fn-key/better-touch-tool-annotated.png" alt="Keyboard Preferences" /></p>

<p>In my case, instead of a key combination, I chose to bind it to a key sequence: <em>Fn button pressed twice consecutively</em>.</p>

<p>And voilà!</p>

<p>Now, when programming I can switch to standard mode to use keys <code class="language-plaintext highlighter-rouge">F7</code>, <code class="language-plaintext highlighter-rouge">F8</code>, <code class="language-plaintext highlighter-rouge">F9</code> and when I want to control my computer I can switch back to system function keys.</p>]]></content><author><name>Onur Eken</name></author><summary type="html"><![CDATA[Learn how to swiftly switch between standard and system function keys.]]></summary></entry><entry><title type="html">Sum to any number using Fibonacci numbers</title><link href="http://localhost:4000/sum-using-fibonacci-numbers" rel="alternate" type="text/html" title="Sum to any number using Fibonacci numbers" /><published>2021-01-31T00:00:00+01:00</published><updated>2021-01-31T00:00:00+01:00</updated><id>http://localhost:4000/sum-using-fibonacci-numbers</id><content type="html" xml:base="http://localhost:4000/sum-using-fibonacci-numbers"><![CDATA[<div class="jekyll-linkpreview-wrapper">
    <div class="jekyll-linkpreview-wrapper-inner">
        <div class="jekyll-linkpreview-content">
            <div class="jekyll-linkpreview-image">
                <a href="https://www.wikiwand.com/en/Zeckendorf%27s_theorem" target="_blank">
                    <img src="/assets/link.png" />
                </a>
            </div>
            <div class="jekyll-linkpreview-body">
                <h4 class="jekyll-linkpreview-title">
                    <a href="https://www.wikiwand.com/en/Zeckendorf%27s_theorem" target="_blank"> Zeckendorf's theorem | Wikiwand</a>
                </h4>
                <div class="jekyll-linkpreview-description"> In mathematics, Zeckendorf's theorem, named after Belgian mathematician Edouard Zeckendorf, is a theorem about the representation of integers as sums of Fibonacci numbers.</div>
            </div>
        </div>
        <div class="jekyll-linkpreview-footer">
            <a href="http://www.wikiwand.com" target="_blank"> www.wikiwand.com</a>
        </div>
    </div>
</div>

<p>This is a part of <strong>Zeckendorf’s theorem</strong> and 
<a href="https://www.wikiwand.com/en/Zeckendorf%27s_theorem" target="_blank"><strong>Wikipedia</strong></a> explains it in 
the mathematical notation but this post is for those who want a verbal explanation.</p>

<blockquote>
  <p><strong>The Problem</strong> <br /></p>
  <ul>
    <li>Can you sum to an arbitrary positive integer \(K\) using the numbers \(f_i\) from the Fibonacci series?</li>
    <li>If so, can you do that using as few \(f_i\) as possible?</li>
  </ul>
</blockquote>

<p>It turns out that the following observation answers both of these questions:</p>

<p><strong>If \(K\) is a Fibonacci number,</strong> then we know that yes, we can sum to \(K\) using Fibonacci number \(K\) 
and that would be the minimal set of \(\{K\}\).</p>

<p><strong>Otherwise, \(K\) lands between two Fibonacci numbers,</strong> say \(f_i\) and \(f_{i+1}\) so that \(f_i &lt; K &lt; f_{i+1}\).
Greedily, we can reduce this problem to a smaller problem of the same kind: Can we sum to \(K-f_i\) using the minimum number of 
Fibonacci numbers? If we would have the answer to that, then we can construct an answer to the original problem by 
simply adding \(f_i\) to the summation list. By induction, our problem shrinks down to the initial numbers in the Fibonacci series
\(\{1, 1, 2, 3, 5, …\}\). It’s easy to spot the minimal summation list when \(K &lt; 4\). Since the base case holds 
our induction holds.</p>

<p>Therefore, we can always construct a list with a minimum number of Fibonacci numbers summing to an arbitrary positive 
integer \(K\), by greedily adding the preceding Fibonacci number \(f_i\) to the list and iterating the problem with 
\(K-f_i\).</p>

<h1 id="the-code">The Code</h1>

<p>An important remark is that <code class="language-plaintext highlighter-rouge">binary_search</code> in the code below returns the Fibonacci number itself (i.e. \(f_i \leq K\)) 
instead of its index. Also, <code class="language-plaintext highlighter-rouge">generate_fibonacci_numbers(k)</code>, creates a list with Fibonacci numbers up to \(K\). This 
code apparently returns the size of the summation list instead of the list itself, however, it’s trivial to alter the 
code to output the actual list.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">sum_with_fibonacci_numbers</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="n">generate_fibonacci_numbers</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
    <span class="n">k</span> <span class="o">-=</span> <span class="n">binary_search</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">num_count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">k</span> <span class="o">-=</span> <span class="n">binary_search</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span>
        <span class="n">num_count</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">num_count</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Onur Eken</name></author><summary type="html"><![CDATA[Also known as Zeckendorf's theorem.]]></summary></entry><entry><title type="html">Not Darkest Dungeon</title><link href="http://localhost:4000/not-darkest-dungeon" rel="alternate" type="text/html" title="Not Darkest Dungeon" /><published>2019-04-27T00:00:00+02:00</published><updated>2019-04-27T00:00:00+02:00</updated><id>http://localhost:4000/not-darkest-dungeon</id><content type="html" xml:base="http://localhost:4000/not-darkest-dungeon"><![CDATA[<!-- intro -->
<p>Recently I have been playing this game called <em>Darkest Dungeon.</em> It is a rogue-like turn-based RPG game. The player gathers a gang of fighters with various characteristics and skills and goes onto exploration of dungeons with various properties. Every dungeon campaign has a goal, and the player suffers a big penalty when returned back from the dungeon without achieving the goal. I really enjoy playing this game as in it’s essence, it pushes the player to develop efficient combat, exploration and team formation strategies under numerous constraints introduced by game dynamics.</p>

<!-- motivation -->
<h3 id="motivation">Motivation</h3>
<p>One of the common goals in dungeons is, namely, <strong>Explore 90% of the rooms</strong>. Dungeon maps are designed as a network of <strong>rooms</strong>. Every room is connected to one or more other rooms with <strong>corridors</strong>. The connections, and therefore the structure of the dungeon map, could be quite arbitrary. See an example dungeon map below. Visiting rooms or corridors is always a costly decision in the game by design. Fighters suffer stress penalty, traps deal HP damage, and resources such as light deplete with each step team takes. Such events in rooms and corridors are marked on the dungeon maps.
For this reason, in this kind of dungeon campaigns, it is almost always a good idea to explore only 90% of the rooms and not more than that. In addition, for the same reason player should rather avoid redundant room visits as they do not contribute to the progress towards the goal.</p>

<center>  
    <div style="margin-top:40px;margin-bottom:40px;">
        <figure style="display:inline-block;">
          <img width="600px" src="/assets/not-darkest-dungeon/dd-map-1.jpg" />
        </figure>

        <p><i>An example map with various event annotations. The large boxes are <b>rooms</b> whereas the sequences of small boxes represent the <b>corridors</b>.</i></p>
    </div>
</center>

<!-- formulation -->
<h3 id="problem">Problem</h3>
<p>This kind of dungeon goal and map posed as an attributed graph, motivated me to come up with an algorithm that calculates the optimal path for the team. To facilitate algorithm’s presentation let’s now make some assumptions, simplifications, and definitions.</p>

<p>Denote the set of all rooms with \(V\) and set of all corridors with \(E\). Furthermore, denote the <strong>cost</strong> of visiting a room \(v \in V \) with \(C(v)\). Similarly, let the <strong>cost</strong> of visiting a corridor \([u,v] \in E \) be \(C([u,v])\). If we start our dungeon campaign in room \(s\), then we want to come up with a sequence of rooms \( P = [s, v_1, v_2, …] \) where the total cost, \( \sum_{i = 2}^{|P|} C(p_i) + C([p_{i-1},p_{i}]) \), is minimal while every room \(v \in V \) is present in \( P \).</p>

<p>For the sake of simplicity, the algorithm presented addresses the constrained version of this problem, although it is easily generalizable. Specifically, let’s assume:</p>
<ul>
  <li>We have to visit not only 90% of the rooms but <strong>all</strong>.</li>
  <li>Cost of visiting any <strong>room</strong> is <strong>1</strong>.</li>
  <li>Cost of visiting any <strong>corridor</strong> is <strong>0</strong>.</li>
</ul>

<p>With this set of assumptions, our algorithm will attempt to find a path that contains all rooms but with as few repetitions as possible.</p>

<!-- algorithm -->
<h3 id="algorithm">Algorithm</h3>
<p>Following a recursive formulation, one can notice that two factors are important to be considered:</p>
<ul>
  <li>Current room, \(r\)</li>
  <li>Map exploration state, \(S\)</li>
</ul>

<p>Here \(S\) is a bitset that maps rooms to \(\{0,1\}\). In other words,  it stores the visited status of the rooms.</p>

<p>Let \(f(r, S)\) be the function computing the cost of the optimal path on a given map starting from room \(r\) with the given exploration state \(S\). We can define it recursively as:</p>

\[f(r,S) = 
    \begin{cases} 
        0 &amp; S = 1 \\
        \min_{k \in \mathcal{N}(r)} \{ f(k, S_k) \} &amp; otherwise
    \end{cases}\]

<p>And notation clarifications…</p>
<blockquote>
  <ul>
    <li>\(S = 1\) indicates a set \(S\) where all rooms are mapped to 1s.</li>
    <li>\(\mathcal{N}(r)\) denotes the neighbours of room \(r\).</li>
    <li>\(S_k\) denotes the transformed version of set \(S\) where room \(k\) is mapped to 1.</li>
  </ul>
</blockquote>

<p>Note that, in contrast to the graph traversal algorithms such as DFS, we may want to visit rooms that are already visited. See the example map below where we start exploring from room 1.</p>

<center>
  <div style="margin-top:40px;margin-bottom:40px;">
        <figure style="margin-top:40px;margin-bottom:40px;">
          <img display="block" width="400.0px" src="/assets/not-darkest-dungeon/graph1.svg" />
          <figcaption style="margin-top:10px"><i>Example map with starting room #1</i></figcaption>
        </figure>

        <figure style="margin-top:40px;margin-bottom:40px;">
          <img display="block" width="400.0px" src="/assets/not-darkest-dungeon/graph1-1.svg" />    
          <figcaption style="margin-top:10px"><i>Optimal solution #1</i></figcaption>
        </figure>

        <figure style="margin-top:40px;margin-bottom:40px;">
          <img display="block" width="400.0px" src="/assets/not-darkest-dungeon/graph1-2.svg" />
          <figcaption style="margin-top:10px"><i>Optimal solution #2</i></figcaption>
        </figure>
    </div>
</center>

<p>With the given recursive formulation, we do not prevent revisiting of rooms but introduce another problem: <strong>infinite recursion</strong>. Let’s unfold the recursion tree for this toy case.</p>

<center>
  <div style="margin-top:40px;margin-bottom:40px;">
        <figure style="margin-top:40px;margin-bottom:40px;">
          <img display="block" width="600px" src="/assets/not-darkest-dungeon/recursion-tree1.svg" />    
          <figcaption style="margin-top:10px"><i>Recursion tree for the toy example. Nodes that cause an infinite loop are marked in red.</i></figcaption>
        </figure>
    </div>
</center>

<!-- implementation tricks -->
<!-- complexity -->
<p>Following edges that lead to <strong>red</strong> nodes would always add redundant costs to the solutions (assuming positive costs) to be explored in the recursion tree. Therefore with an implementation trick, we can detect the loop inducing nodes and never visit those. We have a total of \(N * 2^N\) nodes, therefore worst-case time complexity of this approach would be \(O(N * 2^N)\), where \(N\) represents the total number of rooms in the map. Furthermore, the function we defined calculates the optimal cost but not the path itself. To reconstruct the optimal path, a tailored implementation is needed. See below the critical parts from the full implementation to get an overview of the algorithm.</p>

<!-- code -->
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">Graph</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>      <span class="c1">// number of nodes</span>
    <span class="kt">int</span> <span class="n">e</span><span class="p">;</span>      <span class="c1">// number of edges</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">adjList</span><span class="p">;</span>    <span class="c1">// adj list</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">adjMat</span><span class="p">;</span>    <span class="c1">// adj matrix</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="nc">DDPath</span> <span class="p">{</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">seq</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">cost</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DDPath</span> <span class="nf">searchDDPath</span><span class="p">(</span><span class="n">Graph</span><span class="o">&amp;</span> <span class="n">G</span><span class="p">,</span> <span class="kt">int</span> <span class="n">node</span><span class="p">){</span>
    <span class="c1">// initialize</span>
    <span class="n">DDPath</span> <span class="n">path</span><span class="p">;</span>
    <span class="n">uint</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">v</span> <span class="o">=</span> <span class="n">setBit</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">node</span><span class="p">);</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">unordered_set</span><span class="o">&lt;</span><span class="n">uint</span><span class="o">&gt;&gt;</span> <span class="n">inQuery</span><span class="p">(</span><span class="n">G</span><span class="p">.</span><span class="n">n</span><span class="p">);</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">uint</span><span class="p">,</span> <span class="n">uint</span><span class="o">&gt;&gt;</span> <span class="n">dpCost</span><span class="p">(</span><span class="n">G</span><span class="p">.</span><span class="n">n</span><span class="p">);</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">uint</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">dpNext</span><span class="p">(</span><span class="n">G</span><span class="p">.</span><span class="n">n</span><span class="p">);</span>

    <span class="c1">// run recursive algorithm</span>
    <span class="n">searchDDPathUtil</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">dpCost</span><span class="p">,</span> <span class="n">dpNext</span><span class="p">,</span> <span class="n">inQuery</span><span class="p">);</span>

    <span class="c1">// save and return</span>
    <span class="n">path</span><span class="p">.</span><span class="n">cost</span> <span class="o">=</span> <span class="n">dpCost</span><span class="p">[</span><span class="n">node</span><span class="p">][</span><span class="n">v</span><span class="p">];</span>
    <span class="n">path</span><span class="p">.</span><span class="n">seq</span> <span class="o">=</span> <span class="n">reconstructSequence</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">dpNext</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">path</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">searchDDPathUtil</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">uint</span> <span class="n">v</span><span class="p">,</span> <span class="n">Graph</span><span class="o">&amp;</span> <span class="n">G</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">uint</span><span class="p">,</span> <span class="n">uint</span><span class="o">&gt;&gt;&amp;</span> <span class="n">dpCost</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">uint</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">dpNext</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">unordered_set</span><span class="o">&lt;</span><span class="n">uint</span><span class="o">&gt;&gt;&amp;</span> <span class="n">inQuery</span><span class="p">){</span>
    <span class="c1">// base case</span>
    <span class="k">if</span><span class="p">(</span><span class="n">isFull</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">G</span><span class="p">.</span><span class="n">n</span><span class="p">)){</span> <span class="c1">// search completed</span>
        <span class="n">dpCost</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span> <span class="c1">// cost of the path</span>
        <span class="n">dpNext</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span> <span class="c1">// end of the path</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">inQuery</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">find</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">!=</span> <span class="n">inQuery</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">end</span><span class="p">()){</span> <span class="c1">// loop detected</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">dpCost</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">find</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">!=</span> <span class="n">dpCost</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">end</span><span class="p">()){</span> <span class="c1">// already calculated</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// recurse</span>
    <span class="n">inQuery</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="n">v</span><span class="p">);</span> <span class="c1">// mark this node as in query</span>

    <span class="kt">int</span> <span class="n">bestTrg</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">bestTrgCost</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">trg</span><span class="o">:</span> <span class="n">G</span><span class="p">.</span><span class="n">adjList</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
        <span class="kt">int</span> <span class="n">trgV</span> <span class="o">=</span> <span class="n">setBit</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">trg</span><span class="p">);</span>
        <span class="n">searchDDPathUtil</span><span class="p">(</span><span class="n">trg</span><span class="p">,</span> <span class="n">trgV</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">dpCost</span><span class="p">,</span> <span class="n">dpNext</span><span class="p">,</span> <span class="n">inQuery</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">dpCost</span><span class="p">[</span><span class="n">trg</span><span class="p">].</span><span class="n">find</span><span class="p">(</span><span class="n">trgV</span><span class="p">)</span> <span class="o">!=</span> <span class="n">dpCost</span><span class="p">[</span><span class="n">trg</span><span class="p">].</span><span class="n">end</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">dpCost</span><span class="p">[</span><span class="n">trg</span><span class="p">][</span><span class="n">trgV</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">bestTrgCost</span><span class="p">){</span>
            <span class="n">bestTrgCost</span> <span class="o">=</span> <span class="n">dpCost</span><span class="p">[</span><span class="n">trg</span><span class="p">][</span><span class="n">trgV</span><span class="p">];</span>
            <span class="n">bestTrg</span> <span class="o">=</span> <span class="n">trg</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">cost</span> <span class="o">=</span> <span class="n">bestTrgCost</span> <span class="o">+</span> <span class="n">G</span><span class="p">.</span><span class="n">adjMat</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">bestTrg</span><span class="p">];</span>
    <span class="n">dpCost</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">cost</span><span class="p">));</span>
    <span class="n">dpNext</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">bestTrg</span><span class="p">));</span>

    <span class="n">inQuery</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">erase</span><span class="p">(</span><span class="n">v</span><span class="p">);</span> <span class="c1">// unmark this node as in query</span>
<span class="p">}</span>
</code></pre></div></div>

<!-- extensions -->
<h3 id="extensions">Extensions</h3>
<p>In order to generalize this approach to the problem definition given earlier, one can simply change the recursion termination condition from <strong>all rooms visited</strong> to <strong>X% of the rooms visited</strong>. To deal with varying room and corridor costs, one can simply add those values at each recursion step followed.</p>]]></content><author><name>Onur Eken</name></author><summary type="html"><![CDATA[Finding the way out for your flawed heroes.]]></summary></entry><entry><title type="html">Cartooning Images</title><link href="http://localhost:4000/image-cartooning" rel="alternate" type="text/html" title="Cartooning Images" /><published>2018-05-20T00:00:00+02:00</published><updated>2018-05-20T00:00:00+02:00</updated><id>http://localhost:4000/image-cartooning</id><content type="html" xml:base="http://localhost:4000/image-cartooning"><![CDATA[<p>In this post, I will demonstrate a simple application of variational methods in computer vision. We receive an RGB image of any size as input and want to give it a cartoonish looking style.</p>

<center>
  <div style="margin-left:-20px;">
    <figure style="display:inline-block;">
      <img width="280px" src="/assets/image-cartooning/original.png" style="margin-top:20px;margin-bottom:30px;margin-right:10px" />
    </figure>

    <figure style="display:inline-block;">
      <img width="280px" src="/assets/image-cartooning/final.png" style="margin-top:20px;margin-bottom:30px;margin-right:10px" />
    </figure>
  </div>
</center>

<p><strong>Variational methods?</strong> In these approaches, one typically specifies a probability distribution over the hidden variables that are conditioned upon observed variables and optionally a prior distribution on the hidden variables. This is the model definition phase, then one either performs an inference to uncover properties of the distribution or seeks a particular solution. A solution is just an instantiation of hidden variables, i.e. an assignment of values. Often, one looks for the mode of the distribution. A typical workflow in this approach is as follows:</p>
<ol>
  <li>Specify a probabilistic model that captures the problem well</li>
  <li>Convert it to an error/energy function</li>
  <li>Optimize the error function</li>
</ol>

<blockquote>
  <p>Throughout this post we use the following notation</p>
  <ul>
    <li>\(A \in \mathbb{R}^{kxn}\)</li>
    <li>\(A_{i:}\) is \(i\)th row of \(A\)</li>
    <li>\(A_{:i}\) is \(i\)th column of \(A\)</li>
  </ul>
</blockquote>

<h1 id="model">Model</h1>

<p>For our problem, we will follow the above-mentioned steps as well. In fact, we are going to skip the first step and directly specify a convex error function and optimize it using projected gradient descent. In our case, the observed variables are the RGB values of the pixels and the hidden variables are the cartoonified RGB values of the pixels. Typically, error functions consist of multiple terms enforcing different characteristics for the hidden variables. For this problem, we will use two terms, a <strong>data term</strong> and a <strong>regularizer term</strong>.</p>

\[E =  E_{Data} + E_{Reg}\]

<h4 id="data-term">Data Term</h4>

<p>This term usually measures a dissimilarity between the input/observed-variables and the output/hidden-variables, thus enforcing a similarity between. In our case, it implies that <em>the cartoonified image should to look similar to the input image</em>. We define it as the following:</p>

\[\begin{align}
E_{Data} &amp;=  tr(U^T F) \\
         &amp;=  u_{11}f_{11} + u_{12}f_{12} + ... + u_{kn}f_{kn}
\end{align}\]

<blockquote>
  <ul>
    <li>\(tr(.)\) is trace operator</li>
    <li>\(U \in \mathbb{R}^{k x n}\)</li>
    <li>\(F \in \mathbb{R}^{k x n}\)</li>
    <li>\(n\) is the number of pixels in input image</li>
  </ul>
</blockquote>

<p>What do \(U\), \(F\) and \(k\) represent?</p>

<p>According to our formulation, every pixel in the cartoonified image is one of \(k\) colors. Here \(k\) is a rather small number (e.g. 5) because in general cartoon images contain only a handful of colors. Let \(C\) be set of cartoon colors. What colors are reasonable to have in \(U\)? There is no absolute way to answer this, though it makes sense to put some <em>dominant colors from the input image</em>. We will get back to this later.</p>

<p><strong>\(F\) Matrix</strong></p>

<p>Once we decide on \(C\), we can construct the matrix \(F\) where \(F_{ij}\) measures dissimilarity between the color of the \(j\)th pixel and the \(i\)th color in \(C\). For a demonstration let’s say we picked \(C = \{red, green, blue, white, black\}\)  and constructed \(F\) accordingly. The first row of \(F\) will be a measure of distance of the original image from the color red, the second row of \(F\) for green, so on and so forth. See the following figure for a visualization of each row of \(F\) for this situation.</p>

<center>
  <div style="margin-top:20px;margin-bottom:10px;">

    <figure style="display:inline-block;">
      <img display="block" width="186.66666666666666px" src="/assets/image-cartooning/red.svg" />    
      <figcaption><i>Distances to Red</i></figcaption>
    </figure>

    <figure style="display:inline-block;">
      <img width="186.66666666666666px" src="/assets/image-cartooning/green.svg" />
      <figcaption><i>Distances to Green</i></figcaption>
    </figure>

    <figure style="display:inline-block;">
      <img width="186.66666666666666px" src="/assets/image-cartooning/blue.svg" />
      <figcaption><i>Distances to Blue</i></figcaption>
    </figure>

    <figure style="display:inline-block;">
      <img width="186.66666666666666px" src="/assets/image-cartooning/white.svg" />
      <figcaption><i>Distances to White</i></figcaption>
    </figure>

    <figure style="display:inline-block;">
      <img width="186.66666666666666px" src="/assets/image-cartooning/black.svg" />
      <figcaption><i>Distances to Black</i></figcaption>
    </figure>
  </div>  
</center>

<p><strong>\(U\) Matrix</strong></p>

<p>In our problem, \(U\) matrix is the hidden variables we are going to optimize for. It is not a cartoon image though, but a voting table. In our formulation, every pixel will vote for colors in \(C\) to be converted to. For instance, if \(C\) contains 3 colors and pixel 1 votes:</p>

<ul>
  <li>20% for \(c_1\) (color 1 in \(C\))</li>
  <li>70% for \(c_2\) (color 2 in \(C\))</li>
  <li>10% for \(c_3\) (color 3 in \(C\))</li>
</ul>

<p>then we pick \(C_2\) to be the color for pixel 1 in the cartoonified image. Therefore, once we decide on \(U\), we construct the cartoonified image with the “elected” colors for each pixel. Note that we have the following constraints for \(U\):</p>

<blockquote>
  <ul>
    <li>\(0 \leq U_{ij} \leq 1\),  for \(1 \leq i \leq k\) and \(1 \leq j \leq n\)</li>
    <li>\( || U_{:i} ||_1 = 1\),  for \(1 \leq i \leq n\)</li>
  </ul>

  <p>Where \(||.||\) is the L1-norm and \( U_{:i} \) is the \(i\)th column of \(U\).</p>
</blockquote>

<h4 id="regularizing-term">Regularizing Term</h4>

<p>This term usually measures the variance or extremity of output/hidden-variables, thus enforcing a smoothness. In our case, it implies that <em>the cartoonified image should consist of large intact regions</em>. We define it as the following:</p>

\[E_{Reg} =  \frac{\alpha}{2} \sum_{i=1}^{k} \| DU_{i:} \|^2\]

<blockquote>
  <ul>
    <li>\(||.||\) is the L2-norm operator</li>
    <li>\(D \in \mathbb{R}^{2n x n}\) is a gradient computing matrix both in x-direction and y-direction</li>
    <li>\(\alpha\) is a hyper-parameter adjusting the relative importance of smoothness</li>
  </ul>
</blockquote>

<p>Construction of matrix D is beyond the scope of this post, therefore, we will assume that it is available to us.</p>

<h1 id="approach">Approach</h1>

\[E = tr(U^T F) + \frac{\alpha}{2} \sum_{i=1}^{k} \| DU_{i:} \|^2_2\]

<p>We will optimize the error function using gradient descent. The catch here is that we do not want to violate the constraints laid out for columns of \(U\). They must stay in the set of \(k\)-dimensional <a href="https://en.wikipedia.org/wiki/Simplex" target="_blank"><strong>simplex</strong></a>. Therefore after update step, we use a sub-procedure described in [1] to project each row back to \(k\)-dimensional simplex. The details of this algorithm are again beyond the intention of this post.</p>

<h4 id="gradient-calculation">Gradient Calculation</h4>

<p><strong>Data term:</strong> The gradient due to this term is very straightforward:</p>

\[E_{Data} = u_{11}f_{11} + u_{12}f_{12} + ... + u_{kn}f_{kn}\]

\[\frac{dE_{Data}}{dU} = \begin{bmatrix} 
                          \frac{\partial E_{Data}}{\partial u_{11}} &amp; \frac{\partial E_{Data}}{\partial u_{12}} &amp; \dots \\
                          \vdots &amp; \ddots &amp; \\
                          \frac{\partial E_{Data}}{\partial u_{k1}} &amp;   &amp; \frac{\partial E_{Data}}{\partial u_{kn}}
                        \end{bmatrix}

                      = \begin{bmatrix} 
                          f_{11} &amp; f_{12} &amp; \dots \\
                          \vdots &amp; \ddots &amp; \\
                          f_{k1} &amp;   &amp; f_{kn}
                        \end{bmatrix}

                      = F\]

<p><strong>Regularizer term:</strong> Before computing this, let’s declare two well known derivating rules when we deal with vectors and matrices.</p>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Gradient</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>\(x \in \mathbb{R}^{n}\)</td>
      <td>\(\frac{d (||x||)}{d x} = \frac{x^T}{||x||}  \)</td>
    </tr>
    <tr>
      <td>\(x \in \mathbb{R}^{n}\), \(A \in \mathbb{R}^{kxn}\)</td>
      <td>\(\frac{d Ax}{d x} = A  \)</td>
    </tr>
  </tbody>
</table>

<p>Let’s unfold the summation in the regularizer term:</p>

\[E_{Reg} = \frac{\alpha}{2} [\|DU_{:1}\|^2 + \|DU_{:2}\|^2 + ... + \|DU_{:k}\|^2]\]

<p>We know that \(\frac{d E_{Reg}}{d U} \in \mathbb{R}^{kxn} \). Consider the first term in this series and notice that it is contributing only to the first row of \(\frac{d E_{Reg}}{d U}\). The same is true for other terms, every term is contributing only to their correspondent row. Therefore we can compute each row independently, for example, consider the gradient of the first term.</p>

\[D \in \mathbb{R}^{2nxn} \text{ and } U_{:i} \in \mathbb{R}^{n} \\

\begin{align}
\frac{d (\frac{\alpha}{2} \|DU_{:1}\|^2)}{dU_{:1}} &amp;=  \alpha \|DU_{:1}\| \frac{d(\|DU_{:1}|\|)}{U_{:1}} \\

\frac{d(\|DU_{:1}|\|)}{U_{:1}} &amp;= \frac{d (\|DU_{:1}\|)}{d (DU_{:1})}  \frac{d (DU_{:1})}{d U_{:1}} \textit{ (chain rule)} \\

                               &amp;= \frac{ (DU_{:1})^T }{\|DU_{:1}\|}  D \textit{ (plug-in)} \\

\frac{d (\frac{\alpha}{2} \|DU_{:1}\|^2)}{dU_{:1}} &amp;=  \alpha \|DU_{:1}\| \frac{ (DU_{:1})^T }{\|DU_{:1}\|}  D \\
                                                   &amp;= \alpha U_{:1}^T D^T D  

 
\end{align}\]

<p>Applying same operations to the other terms, we get the following equality:</p>

\[\frac{dE_{Reg}}{dU} = \alpha \begin{bmatrix} 
                                U_{1:}^T D^T D\\
                                U_{2:}^T D^T D\\
                                \vdots\\
                                U_{k:}^T D^T D\\
                               \end{bmatrix}\]

<p>Combining the gradient of the data-term and the of regularizer term, we get the complete gradient.</p>

\[\frac{dE}{dU} = F + \alpha \begin{bmatrix} 
    U_{1:}^T D^T D\\
    U_{2:}^T D^T D\\
    \vdots\\
    U_{k:}^T D^T D\\
 \end{bmatrix}\]

<p>The following code computes the gradient as described:</p>

<div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">grad</span> <span class="o">=</span> <span class="n">compute_gradient</span><span class="p">(</span><span class="n">U</span><span class="p">,</span><span class="n">F</span><span class="p">,</span><span class="n">D</span><span class="p">,</span><span class="nb">alpha</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
    <span class="n">grad1</span> <span class="o">=</span> <span class="n">F</span><span class="p">;</span>    
    <span class="n">grad2</span> <span class="o">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
    <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">:</span><span class="n">k</span>
        <span class="n">Du</span> <span class="o">=</span> <span class="n">D</span><span class="o">*</span><span class="n">U</span><span class="p">(</span><span class="n">i</span><span class="p">,:)</span><span class="o">'</span><span class="p">;</span>        
        <span class="n">grad2</span><span class="p">(</span><span class="n">i</span><span class="p">,:)</span> <span class="o">=</span> <span class="n">Du</span><span class="o">'</span> <span class="o">*</span> <span class="n">D</span><span class="p">;</span>
    <span class="k">end</span>    
    <span class="n">grad</span> <span class="o">=</span> <span class="n">grad1</span> <span class="o">+</span> <span class="nb">alpha</span> <span class="o">*</span> <span class="n">grad2</span><span class="p">;</span>
<span class="k">end</span>

</code></pre></div></div>

<h1 id="implementation">Implementation</h1>

<p>There is one thing that we did not elaborate on: selection of color set. How do we decide which colors to use in the cartoon image?
Again there is no single answer to this. Some approaches could be:</p>

<ol>
  <li>Hand-pick \(C\)</li>
  <li>Cluster the colors in the image and pick \(k\) of them</li>
</ol>

<p>In my implementation, I picked \(C\) as the cluster centers resulting from the output of \(k\)-means algorithm on image colors. The colors are as following when \(k = 5\)</p>

<center>
  <div style="margin-top:20px;margin-bottom:10px;">
    <figure style="display:inline-block;">
      <img display="block" width="560px" src="/assets/image-cartooning/colors.png" />    
    </figure>
  </div>  
</center>

<p>The MATLAB script to perform projected gradient descent is as follows:</p>

<div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">% input</span>
<span class="n">I</span> <span class="o">=</span> <span class="nb">imread</span><span class="p">(</span><span class="n">img_path</span><span class="p">);</span>

<span class="c1">% init derivators</span>
<span class="n">Dx</span> <span class="o">=</span> <span class="n">get_derivator_x</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="n">w</span><span class="p">);</span>
<span class="n">Dy</span> <span class="o">=</span> <span class="n">get_derivator_y</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="n">w</span><span class="p">);</span>
<span class="n">D</span> <span class="o">=</span> <span class="p">[</span><span class="n">Dx</span><span class="p">;</span> <span class="n">Dy</span><span class="p">];</span>

<span class="c1">% parameters</span>
<span class="nb">alpha</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
<span class="n">eta</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">;</span> <span class="c1">% step size</span>
<span class="n">tolerance</span> <span class="o">=</span> <span class="mf">1e-5</span><span class="p">;</span> 
<span class="n">max_iter</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>

<span class="c1">% init problem</span>
<span class="n">F</span> <span class="o">=</span> <span class="n">build_F</span><span class="p">(</span><span class="n">I</span><span class="p">,</span><span class="n">C</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
<span class="n">U</span> <span class="o">=</span> <span class="n">random_init_u</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>

<span class="c1">% update until convergence</span>
<span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">:</span><span class="n">max_iter</span>
    <span class="n">U_prev</span> <span class="o">=</span> <span class="n">U</span><span class="p">;</span>    
    <span class="n">grad</span> <span class="o">=</span> <span class="n">compute_gradient</span><span class="p">(</span><span class="n">U</span><span class="p">,</span><span class="n">F</span><span class="p">,</span><span class="n">D</span><span class="p">,</span><span class="nb">alpha</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
    <span class="n">U</span> <span class="o">=</span> <span class="n">U</span> <span class="o">-</span> <span class="n">eta</span> <span class="o">*</span> <span class="n">grad</span><span class="p">;</span>
    <span class="n">U</span> <span class="o">=</span> <span class="n">project_to_simplex</span><span class="p">(</span><span class="n">U</span><span class="p">);</span>
            
    <span class="nb">diff</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">U</span><span class="p">(:)</span> <span class="o">-</span> <span class="n">U_prev</span><span class="p">(:)))</span> <span class="p">/</span> <span class="p">(</span><span class="n">h</span> <span class="o">*</span> <span class="n">w</span> <span class="o">*</span> <span class="n">k</span><span class="p">);</span>    
    <span class="k">if</span> <span class="nb">diff</span><span class="o">&lt;</span><span class="n">tolerance</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">end</span>  
<span class="k">end</span>

<span class="c1">% build image from U</span>
<span class="n">Ic</span> <span class="o">=</span> <span class="n">build_image</span><span class="p">(</span><span class="n">U</span><span class="p">,</span><span class="n">C</span><span class="p">,</span><span class="n">h</span><span class="p">,</span><span class="n">w</span><span class="p">);</span>
</code></pre></div></div>

<p>See an example evolution of the dog image starting from a random initialization:</p>

<center>
  <div style="margin-top:20px;margin-bottom:10px;">
    <figure style="display:inline-block;">
      <img display="block" width="280px" src="/assets/image-cartooning/anim.gif" />    
    </figure>    
  </div>  
</center>

<p>Results of some experiments with different selections of hyper-parameters:</p>

<center>
  <div style="margin-top:20px;margin-bottom:30px;">
    <figure style="display:inline-block;">
      <img display="block" width="233.33333333333334px" src="/assets/image-cartooning/a-0.0-k-05.png" />    
      <figcaption><i>Alpha: 0.0, k: 5</i></figcaption>
    </figure>
    
    <figure style="display:inline-block;">
      <img display="block" width="233.33333333333334px" src="/assets/image-cartooning/a-1.0-k-05.png" />    
      <figcaption><i>Alpha: 1.0, k: 5</i></figcaption>
    </figure>

    <figure style="display:inline-block;">
      <img display="block" width="233.33333333333334px" src="/assets/image-cartooning/a-0.5-k-10.png" />    
      <figcaption><i>Alpha: 0.5, k: 10</i></figcaption>
    </figure>  
  </div>  
</center>

<h1 id="references">References</h1>

<p>[1] Chen, Yunmei, and Xiaojing Ye. “Projection onto a simplex.” arXiv preprint arXiv:1101.6081 (2011).</p>]]></content><author><name>Onur Eken</name></author><summary type="html"><![CDATA[A variational approach to cartoonify RGB images.]]></summary></entry><entry><title type="html">Intuition Behind Dijkstra’s SPA</title><link href="http://localhost:4000/dijkstra-intuition" rel="alternate" type="text/html" title="Intuition Behind Dijkstra’s SPA" /><published>2018-05-09T00:00:00+02:00</published><updated>2018-05-09T00:00:00+02:00</updated><id>http://localhost:4000/dijkstra-intuitive</id><content type="html" xml:base="http://localhost:4000/dijkstra-intuition"><![CDATA[<p><strong>Prerequisite:</strong> Familiarity with graph data structure and recursion/dynamic programming.</p>

<h1 id="motivation">Motivation</h1>

<p><a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm" target="_blank"><strong>Dijkstra’s Shortest Path Algorithm</strong></a> is one of the fundamental algorithms on graph data structures. It has many application areas thus used very frequently. There are numerous resources (textbooks, lectures etc.) from which one can learn how it works. The problem with those resources is that the following classic recipe is used to explain this algorithm:</p>

<ol>
  <li>List the instructions in pseudocode</li>
  <li>Elaborate on the idea of each instruction</li>
</ol>

<p>In general, this is a nice strategy to teach algorithms but in the case of Dijkstra’s algorithm, it does not work well. When I was an undergrad student I learned it this way as well, but the algorithm faded in my mind in a relatively short time when I did not go over it. I think the main reason is it was not possible to state the idea of Dijkstra’s algorithm in simple terms.</p>

<p>It turns out that there is a more intuitive and simpler explanation for this algorithm. It is unraveled when the solution to the problem is formulated recursively. The Dijkstra’s algorithm essentially:</p>
<ul>
  <li>Solves the recursive formulation through tabulation</li>
  <li>Includes some implementation tricks to reduce the runtime</li>
</ul>

<p>For the better understanding of what exactly Dijkstra’s SPA does, in this post, we will elaborate on the recursive formulation to solve this problem.</p>

<h1 id="idea">Idea</h1>

<p><strong>Problem:</strong> Given a source node \(S\), for each node \(N_i\) in the graph we would like to find a path (a sequence of nodes) from \(S\) to \(N_i\) whose cost is minimal. The cost of a path is the sum of the weights of the edges observed in the path. This problem is known as <em>single-source shortest path problem</em> (SSSP). Let us only consider the graphs with non-negative edge weights.</p>

<p>To show the recursive relation, as always, we assume that we already have the solution to a smaller version of the problem. In this case:</p>
<ul>
  <li>Let \(K\) denote the set of nodes in which we know the shortest paths to and the costs associated with them.
    <ul>
      <li>Includes \(S\) too.</li>
      <li>None of the paths follow a node that is not in \(K\).</li>
    </ul>
  </li>
  <li>Let \(T\) be the set of nodes that have an immediate connection to \(K\).
    <ul>
      <li>In other words, the nodes that have an edge to at least one of the nodes in \(K\).</li>
    </ul>
  </li>
  <li>Furthermore, let \(L\) be the set of nodes that are not in \(K\) or \(T\).</li>
</ul>

<p>Let’s demonstrate these 3 sets with a figure. Consider only the nodes in the graph in Figure 1 where:</p>
<ul>
  <li><strong><span style="color:#9673A6">Purple</span> \(S\) node:</strong> the source node</li>
  <li><strong>Nodes in <span style="color:#FF6666">red area</span>:</strong> the set \(K\)</li>
  <li><strong><span style="color:#D79B00">Orange</span> nodes:</strong> the set \(T\)</li>
  <li><strong><span style="color:#6C8EBF">Pale blue</span> nodes:</strong> the set \(L\)</li>
</ul>

<center><img width="480px" src="/assets/dijsktra-intuitive/dijkstra.svg" style="margin-top:20px;margin-bottom:30px;" /></center>
<center><b>Figure 1:</b> <i>An example graph with node sets K, T, L and the candidate paths for node C</i></center>
<p><br /></p>

<p>To concretize better we have put 3 nodes in \(T\), namely \(A\), \(B\), and \(C\). Let’s say you consider all possible paths going from \(S\) to \(C\). There are 3 different <em>groups of paths</em>:</p>
<ul>
  <li><strong>1st group:</strong> the paths that go to \(C\) without visiting \(A\) or B</li>
  <li><strong>2nd group:</strong> the paths that go to \(C\) by visiting \(A\)</li>
  <li><strong>3rd group:</strong> the paths that go to \(C\) by visiting \(B\)</li>
</ul>

<p>Although 2nd and 3rd group are not disjoint, this is not a problem for us. Keep in mind that union of these 3 groups cover all paths going from \(S\) to \(C\).</p>

<blockquote>
  <p>We will use the following notation in the remaining parts of this post:</p>
  <ul>
    <li>\(w(U,V)\) denoting the weight of the edge between the nodes \(U\) and \(V\).</li>
    <li>\(sp(U,V)\) denoting the cost of the shortest path from the node \(U\) to the node \(V\).</li>
  </ul>
</blockquote>

<p>Furthermore, let \(M_C\) be the node in \(K\) that \(C\) is connected to and the following sum  is minimal: \(sp(S,M_C) + w(M_C,C)\)<br />
Let us call this sum <strong>d</strong>irect <strong>s</strong>hortest <strong>p</strong>ath to \(C\), denoted with \(dsp(S,C)\).</p>

<p>Note that \(dsp(S,.)\) is not only defined for \(C\) but also for the other nodes in \(T\).</p>

<p>For the node \(C\), We see that <strong>the shortest path in each group</strong> (let’s call it candidate path) would have the following costs:</p>

<ul>
  <li>1st candidate cost: <span style="color:#009900">\(dsp(S,C)\)</span></li>
  <li>2nd candidate cost: <span style="color:#004C99">\(dsp(S,A)\)</span> \(+\) <span style="color:#007FFF">\(sp(A,C)\)</span></li>
  <li>3rd candidate cost: <span style="color:#CC0000">\(dsp(S,B)\)</span> \(+\) <span style="color:#FF0000;">\(sp(B,C)\)</span></li>
</ul>

<p>Here the \(sp\) terms are unknown to us, we only know that they are non-negative. Other terms are available. Each term is color-coded and their correspondent paths are shown in Figure 1 with arrows.</p>

<p>Just like the node \(C\), we can define the same groups for \(A\) and \(B\) as well. And the costs of the candidate paths in those groups would be as following.</p>

<p>For \(A\):</p>
<ul>
  <li>1st candidate cost: \(dsp(S,A)\)</li>
  <li>2nd candidate cost: \(dsp(S,B) + sp(B,A)\)</li>
  <li>3rd candidate cost: \(dsp(S,C) + sp(C,A)\)</li>
</ul>

<p>For \(B\):</p>
<ul>
  <li>1st candidate cost: \(dsp(S,B)\)</li>
  <li>2nd candidate cost: \(dsp(S,A) + sp(A,B)\)</li>
  <li>3rd candidate cost: \(dsp(S,C) + sp(C,B)\)</li>
</ul>

<h4 id="key-observation">Key Observation</h4>

<p>So, for each of \(A\), \(B\), \(C\) there are 3 candidate shortest paths. Without loss of generality, lets say \(dsp(S,C) \leq dsp(S,A) \leq dsp(S,B)\). This comparison enables us to give a guarantee.</p>

<p>As soon as we know this inequality <strong>we can guarantee that the 1st candidate path of \(C\) has smaller (or equal) cost than other two candidate paths of \(C\)!</strong> This works only given the fact that no term (e.g. \(w\), \(dsp\), \(sp\)) is negative. Which essentially means no edges with negative weights. For other two nodes \(A\) and \(B\) we cannot give guarantees. That is not a problem though, we have just discovered a new shortest path from \(S\) which goes to \(C\). We now include \(C\) in the set \(K\), repeat the same procedure with the enlarged set \(K\). As for the base case, we would have only one node in \(K\) that is the source node \(S\).</p>

<p>In plain English, the guarantee we found says that:</p>

<blockquote>
  <p>Among the paths that go from \(S\) to the nodes in the immediate neighbourhood of set \(K\) using only the nodes in \(K\), the one with the smallest cost is the shortest path from \(S\) to the node where the path ends.</p>
</blockquote>

<p>Notice that we did not mention if the edges are directed or undirected. That is because it does not matter, undirected edges can be represented with directed edges. The recurrence relation takes only 2 things into consideration: given a node what other nodes are reachable are and at what cost is. Directed weighted edges contain this information.</p>

<h1 id="procedure-and-optimization">Procedure and Optimization</h1>

<p>This recursive relation is easiest implemented by tabulation. Starting from the base case we grow the set \(K\) one node at a time. The following is the inefficient pseudocode describing the procedure.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input:  N, number of nodes
	E, set of edges with weights
	s, source node
Output: cost, shortest path cost to each node

procedure dijkstraSSSP
  // base case
  cost[s] = 0
  K = {s}

  // tabulate N-1 times
  for i = 2 ... N
    T = getImmediateNodes(K)    
    shortestNode = -1
    shortestCost = Inf
    for each node in T
      for each (source,node,weight) in E
        if cost[source] + weight &lt; shortestCost
          shortestCost = cost[source] + weight
          shortestNode = node
        end
      end
    end

    cost[shortestNode] = shortestCost
    K.add(shortestNode)
  end
end
</code></pre></div></div>

<p><strong>Optimization Idea:</strong> Essentially we have a set of costs (of paths that go to nodes in \(T\) from \(S\)) in which sometimes we add and remove elements (caused by moving node from set \(T\) to \(K\)). We are interested in the minimum element in this set. This is the perfect scenario for <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)">heaps</a>.</p>

<h1 id="remarks">Remarks</h1>

<p>Once one notices the above-mentioned guarantee, the idea is very simple to implement. What makes the regular explanation of Dijkstra’s algorithm hard is:</p>
<ul>
  <li>No explanation for the guarantee/observation</li>
  <li>Optimized code with implementation details</li>
</ul>]]></content><author><name>Onur Eken</name></author><summary type="html"><![CDATA[Examining a recursive formulation to solve single-source shortest path problems.]]></summary></entry><entry><title type="html">Stock trading using at most T transactions</title><link href="http://localhost:4000/stock-trading" rel="alternate" type="text/html" title="Stock trading using at most T transactions" /><published>2018-05-02T00:00:00+02:00</published><updated>2018-05-02T00:00:00+02:00</updated><id>http://localhost:4000/stock-trading</id><content type="html" xml:base="http://localhost:4000/stock-trading"><![CDATA[<p><strong>Prerequisite</strong>: This explanation assumes that you are familiar with the concept of <a href="https://en.wikipedia.org/wiki/Dynamic_programming" target="_blank">dynamic programming</a>.</p>

<p>Say that we are a bunch of smart people who want to make money by stock trading. We cannot predict the future, but at least we would like to know how much money we could have made maximally if we knew the stock prices in future days. In the minimalistic world we live in, there is only one company offered to the public. We are given an array of integers <code class="language-plaintext highlighter-rouge">A</code> representing the stock prices of the company every day. In addition, we are given a number <code class="language-plaintext highlighter-rouge">T</code> representing the maximum number of transactions we could perform. A transaction is buying a stock and selling it later. Let us assume one more rule: we cannot do transactions concurrently. I.e. if we bought a stock on a day we have to sell it before we would like to buy another one. Imagine as if only a single stock exists. But also we are not concerned that whether this single stock is unavailable or not when we do not possess it. It is reserved for the interaction of ours only.</p>

<p>Let’s see some example cases to get a better grasp of what we are dealing with.</p>

<h4 id="example-case-1">Example Case 1</h4>

<p><code class="language-plaintext highlighter-rouge">A</code>: \( [3,3,5,0,0,3,1,4] \)<br />
<code class="language-plaintext highlighter-rouge">T</code>: \(2\)</p>

<p>In this particular instance of this problem, the optimal strategy would be:</p>
<ul>
  <li>Buy on day 4</li>
  <li>Sell on day 6 (profit: 3)</li>
  <li>Buy on day 7</li>
  <li>Sell on day 8 (profit: 3)
Thus the total profit would be 6.</li>
</ul>

<h4 id="example-case-2">Example Case 2</h4>

<p><code class="language-plaintext highlighter-rouge">A</code>: \( [7,6,4,3,1] \)<br />
<code class="language-plaintext highlighter-rouge">T</code>: \(2\)</p>

<p>In this instance, there is no way to make a profit by performing a transaction. So we rather do not bother at all and the total profit would be 0. Recall that we are <strong>not</strong> obliged to use <code class="language-plaintext highlighter-rouge">T</code> transactions. Rather, we could use at most <code class="language-plaintext highlighter-rouge">T</code> transactions.</p>

<h1 id="approach">Approach</h1>

<p>We want to come up with a computer program that figures out the optimal strategy for us. For simplicity reasons our program is going to output only the <em>maximum profit</em> rather than the history of transactions. We follow a dynamic programming approach. Let’s begin by defining the Bellman equation:</p>

<p>Let \(f[i][t]\) be the maximal profit that can be made using the first \(i\) items of the array by using at most \(t\) transactions.</p>

<p>According to this definition we observe that the base case is:</p>
<ul>
  <li>\(f[i][0] = 0\), for any \(i \geq 0\)</li>
  <li>\(f[0][t] = 0\), for any \(t \geq 0\)</li>
</ul>

<p>Assume that array \(A\) is 0-based and size of \(N\). We define the recursive case as the following:</p>

\[f[i][t] = max
\left \{
\begin{align} 	
	&amp;f[i-1][t],\\ 
	&amp;f[i-1][t-1] + (A[i-1] - A[i-2]),\\
	&amp;f[i-2][t-1] + (A[i-1] - A[i-3]),\\
	&amp;f[i-3][t-1] + (A[i-1] - A[i-4]),\\
	&amp;.\\
	&amp;.\\
	&amp;f[1][t-1] + (A[i-1] - A[0])\\
\end{align}
\right \}\]

<p><strong>Explanation</strong>: Consider the problem \(f[i][t]\), that is when we are taking first \(i\) stock prices into account and there are \(t\) transactions available to us. For this problem there exists an optimal list of transactions which maximizes profit. Consider the very last transaction in this optimal list:</p>
<ul>
  <li>It takes place after all others in the list.</li>
  <li>We would like to figure out when this last transaction takes place (time it’s bought and time it’s sold), but it is not obvious.</li>
  <li>If we make a guess for when it takes place (e.g. bought at \((i-3)\) and sold at \((i-1)\)) then by solving a smaller version of this problem (a sub-problem) we can give an answer to the current problem.
    <ul>
      <li>In that sub-problem, we would have 1 less transaction available, and would consider the array of prices that come before the purchase we guessed.</li>
    </ul>
  </li>
  <li>Assume that we already have the answers to the sub-problems.</li>
  <li>So the idea is to consider all such guesses and take the one that yields the maximum profit.</li>
</ul>

<p>To concretize let us explain what each line in the equation above means. Recall, we are considering the problem \(f[i][t]\).</p>

<ul>
  <li>\(f[i-1][t]\), no action at time \(i-1\)</li>
  <li>\(f[i-1][t-1] + (A[i-1] - A[i-2])\), sell your stock at time \(i-1\) and guess that it was bought at time \(i-2\)</li>
  <li>\(f[i-2][t-1] + (A[i-1] - A[i-3])\), sell your stock at time \(i-1\) and guess that it was bought at time \(i-3\)</li>
  <li>\(f[i-3][t-1] + (A[i-1] - A[i-4])\), sell your stock at time \(i-1\) and guess that it was bought at time \(i-4\)</li>
  <li>So on until to the last possibility…</li>
  <li>\(f[1][t-1] + (A[i-1] - A[0])\), sell your stock at time \(i-1\) and guess that it was bought at time \(0\)</li>
</ul>

<p>Notice that with this recursive definition (thanks to the first equation i.e. \(f[i-1][t]\)) we do not need to search for selling time of the last stock. Algorithm intrinsically considers all <em>selling time choices</em> by being able to skip a timestep.</p>

<p>See the image below which demonstrates the dynamic programming table and the dependencies originating from our recursive definition.</p>
<ul>
  <li>The purple box is the current problem \(f[i][t]\).</li>
  <li>Blue boxes are its dependencies.
    <ul>
      <li>Boxes with red spots are the sub-problems when we consider selling at time \(i-1\).</li>
      <li>The one with the green spot is the sub-problem when <em>no-action</em> is considered.</li>
    </ul>
  </li>
</ul>

<center><img width="500px" style="margin-top:20px;margin-bottom:30px;" src="/assets/stock-trading/dp-table.svg" /></center>

<h1 id="implementation-trick">Implementation Trick</h1>

<p>It looks all good except for one fatal failure. Dynamic programming is useful only when constructing a solution to a problem from the solutions of sub-problems is easy/efficient. In the recursive definition we gave above, for each cell of the table we need to iterate over solutions to many other sub-problems, rendering this approach \(O(N^2 T)\) in terms of time and \(O(N T)\) in terms of space. Where \(N\) is the size of the array and \(T\) is the number of transactions allowed.</p>

<p><strong>Observation</strong>: Luckily with an implementation trick we can reduce the time complexity to \(O(N T)\). Below, compare what is needed to compute \(f[i][t]\) and \(f[i+1][t]\) and see if we can simplify computation of \(f[i+1][t]\).</p>

\[\scriptsize
f[i][t] = max
\left \{
\begin{matrix} 	
f[i-1][t],\\ 
f[i-1][t-1] + (A[i-1] - A[i-2]),\\
f[i-2][t-1] + (A[i-1] - A[i-3]),\\
f[i-3][t-1] + (A[i-1] - A[i-4]),\\
.\\
.\\
f[1][t-1] + (A[i-1] - A[0])\\
\end{matrix}
\right \}
\hspace{5mm}

f[i+1][t] = max
\left \{
\begin{matrix} 	
f[i][t],\\ 
f[i][t-1] + (A[i] - A[i-1]),\\
f[i-1][t-1] + (A[i] - A[i-2]),\\
f[i-2][t-1] + (A[i] - A[i-3]),\\
.\\
.\\
f[1][t-1] + (A[i] - A[0])\\
\end{matrix}
\right \}\]

<p>Noticed a pattern?</p>

\[\scriptsize
max
\left \{
\begin{matrix} 	
f[i-1][t-1] + (A[i-1] - A[i-2]),\\
f[i-2][t-1] + (A[i-1] - A[i-3]),\\
f[i-3][t-1] + (A[i-1] - A[i-4]),\\
.\\
.\\
f[1][t-1] + (A[i-1] - A[0])\\
\end{matrix}
\right \}

+(A[i]-A[i-1])

= 

\left \{
\begin{matrix}
f[i-1][t-1] + (A[i] - A[i-2]),\\
f[i-2][t-1] + (A[i] - A[i-3]),\\
f[i-3][t-1] + (A[i] - A[i-4]),\\
.\\
.\\
f[1][t-1] + (A[i] - A[0])\\
\end{matrix}
\right \}\]

<p>From the expression above we can draw the following observation:<br />
If we keep track of maximum of last \(i-1\) elements used in the computation of \(f[i][t]\) (let us call it <code class="language-plaintext highlighter-rouge">runningMax</code>) then we can construct an answer to \(f[i+1][t]\) in \(O(1)\) by:</p>
<ul>
  <li>Converting <code class="language-plaintext highlighter-rouge">runningMax</code> by adding <code class="language-plaintext highlighter-rouge">(A[i]-A[i-1])</code></li>
  <li>Computing <code class="language-plaintext highlighter-rouge">max(runningMax, f[i][t], f[i][t-1] + (A[i]-A[i-1]))</code> as the answer
    <ul>
      <li>The latter two are the first two dependencies needed for the computation of \(f[i+1][t]\)</li>
    </ul>
  </li>
</ul>

<p>For the computation of following problems (e.g. \(f[i+2][t]\), \(f[i+3][t]\), …) we also need to keep <code class="language-plaintext highlighter-rouge">runningMax</code> updated by doing the following:<br />
<code class="language-plaintext highlighter-rouge">runningMax = max(runningMax, f[i][t-1] + (A[i]-A[i-1]))</code></p>

<h1 id="implementation">Implementation</h1>

<p>Below is the implementation in C++.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">vint</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">;</span>
<span class="k">using</span> <span class="n">vvint</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vint</span><span class="o">&gt;</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">maxProfit</span><span class="p">(</span><span class="n">vint</span> <span class="o">&amp;</span><span class="n">A</span><span class="p">,</span> <span class="kt">int</span> <span class="n">T</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
    <span class="n">vvint</span> <span class="n">f</span><span class="p">(</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">vint</span><span class="p">(</span><span class="n">T</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">t</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">t</span><span class="o">&lt;=</span><span class="n">T</span><span class="p">;</span> <span class="o">++</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">runningMax</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">f</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
	    <span class="kt">int</span> <span class="n">change</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
            <span class="n">runningMax</span> <span class="o">+=</span> <span class="n">change</span><span class="p">;</span> <span class="c1">// convert running max</span>
            <span class="n">runningMax</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">runningMax</span><span class="p">,</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">t</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">change</span><span class="p">);</span> <span class="c1">// update running max</span>
            <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">t</span><span class="p">],</span> <span class="n">runningMax</span><span class="p">);</span> <span class="c1">// the answer</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">f</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">T</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="remarks">Remarks</h1>

<p>This is one of the not very obvious dynamic programming problems and in this particular formulation the implementation trick plays a very important part since otherwise time complexity is simply too expensive.</p>]]></content><author><name>Onur Eken</name></author><summary type="html"><![CDATA[A dynamic programming puzzle.]]></summary></entry><entry><title type="html">Code Jam 2018: Cubic UFO</title><link href="http://localhost:4000/cubic-ufo" rel="alternate" type="text/html" title="Code Jam 2018: Cubic UFO" /><published>2018-04-11T00:00:00+02:00</published><updated>2018-04-11T00:00:00+02:00</updated><id>http://localhost:4000/cubic-ufo</id><content type="html" xml:base="http://localhost:4000/cubic-ufo"><![CDATA[<p class="info">Google Code Jam is an annual, international programming competition. Similar to ACM/ICPC but less restrictive since anyone who registers online can compete. Also the contest is not team based. It consists of several stages until its final onsite round. The very first stage qualification round recently took place.</p>

<p>I have checked the problems and proposed some solutions to those.</p>

<p><strong>Disclaimer</strong>: Proposed ideas and implementations are not official, ideal, nor coded optimally. Instead, this is only one way to tackle the problem. Feel free to contact me to feedback possible optimizations!</p>

<p><strong>Prerequisite</strong>: This explanation assumes that you are familiar with the terms, variables and the problem itself as defined on the official Code Jam <a href="https://codejam.withgoogle.com/2018/" target="_blank"><strong>page</strong></a>. If you have not read the problem description, please take your time and go through all of it.</p>

<h1 id="observations">Observations</h1>

<p>Let say that we represent the rotation of the cube using normal vectors of it’s 3 orthogonal faces: \(\vec{u}, \vec{v}, \vec{w}\). That are initially:</p>

<ul>
  <li>\(\vec{u} = \begin{bmatrix}1 &amp; 0 &amp; 0\end{bmatrix}\)</li>
  <li>\(\vec{v} = \begin{bmatrix}0 &amp; 1 &amp; 0\end{bmatrix}\)</li>
  <li>\(\vec{w} = \begin{bmatrix}0 &amp; 0 &amp; 1\end{bmatrix}\)</li>
</ul>

<p>Rotating the cube is equivalent of applying a rotation to these vectors. Luckily the cube is centered at \((0,0,0)\), this simplifies the rotation procedure. To rotate any of \(\vec{u}, \vec{v}, \vec{w}\), we only need to multiply the vector with a rotation matrix.</p>

<p><strong>Info:</strong> <em>If the cube was not centered at (0,0,0), we would need to shift it back to origin, apply rotation then shift it back its original center. Rotation matrices rotate with respect to origin of the coordinate system.</em></p>

<p>Furthermore, let:</p>
<ul>
  <li>\(\theta_x\) denote angle of rotation of the cube about the x-axis</li>
  <li>\(\theta_y\) denote angle of rotation of the cube about the y-axis</li>
  <li>\(\theta_z\) denote angle of rotation of the cube about the z-axis</li>
</ul>

<p>We notice that \(\theta_y\) is ineffective on the final value that we want to compute, the area of the shadow, let’s name it \(A\). That is because the normal of the plane we want to project to and y-axis are aligned. Thus, we only need to search for 2 values, \(\theta_x, \theta_z\).</p>

<p>Next questions is, given \(\theta_x, \theta_z\) how do we compute area \(A\)?</p>

<p>The projection is captured with dot product operation in Euclidian spaces. Let \(\vec{n}\) be the normal vector of the plane \(y = -3\) (our target plane in the problem), then area of the shadow/projection is given by \(A = |\vec{n} * \vec{u}| + |\vec{n} * \vec{v}| + |\vec{n} * \vec{w}|\) where \(*\) represents dot product and \(|.|\) represents absolute value operation.</p>

<p>We use the following notation to denote the <strong>rotated version of vector \(\vec{v}\)</strong>:</p>

<p>Let \(\theta\) represent the parameter pair, \( \theta = \begin{bmatrix}\theta_x &amp; \theta_z \end{bmatrix} \)<br />
Let \( \vec{v_\theta} = rot_{\theta_{xy}}(\vec{v}) = rot_x(\theta_x, rot_z(\theta_z, \vec{v})) \), where:</p>

<ul>
  <li>\( rot_z(\theta_z, \vec{v}) \) rotates a vector \(\vec{v}\) by \(\theta_z\) degrees about the z-axis.</li>
  <li>\( rot_x(\theta_x, \vec{v}) \) rotates a vector \(\vec{v}\) by \(\theta_x\) degrees about the x-axis.</li>
  <li>\(\vec{v_\theta}\), is the resulting vector when \(\vec{v}\) is first rotated \(\theta_z\) degrees about z-axis and <strong>then</strong> rotated \(\theta_x\) degrees about x-axis.</li>
  <li>Note that order of rotation matrices applied matters. Applying the the rotation about x-axis first, z-axis second does not necessarily yield the same output vector. You can notice this asymmetry in the definition of rotation matrices.</li>
</ul>

<p>Next we calculated what \(\vec{v_\theta}\) is equivalent of analytically. It essential is a small series of matrix-matrix-vector multiplication.</p>

\[\vec{v_\theta} = 

 \begin{bmatrix} &amp; x*cos\theta_z - y*sin\theta_z \\ 
 				 &amp; x*cos\theta_x*sin\theta_z + y*cos\theta_x*cos\theta_z - z*sin\theta_x \\
 				 &amp; x*sin\theta_x*sin\theta_z + y*sin\theta_x*cos\theta_z + z*cos\theta_x \\
 \end{bmatrix}\]

<p>where \(\vec{v} = \begin{bmatrix}x &amp; y &amp; z\end{bmatrix}^T\)</p>

<p>Let’s say now we managed to rotate a normal vector of a face of the cube. To compute the area that this face generates on the plane, we will calculate dot product of it with the vector \((0,1,0)\) which is the normal vector of the plane. This is simply selecting the <strong>2nd component</strong> of the <em>rotated vector:</em><br />
\( x * cos\theta_x * sin\theta_z + y * cos\theta_x * cos\theta_z - z * sin\theta_x \)</p>

<p>We need to do this for normals of all three faces of the cube: \((1,0,0)\), \((0,1,0)\) and \((0,0,1)\). This effectively means that:</p>
<ul>
  <li>Set \(x = 1, y = 0, z = 0\) in the equation and compute area due to this face of the cube.</li>
  <li>Set \(x = 0, y = 1, z = 0\) in the equation and compute area due to this face of the cube.</li>
  <li>Set \(x = 0, y = 0, z = 1\) in the equation and compute area due to this face of the cube.</li>
</ul>

<p>We calculate areas due to each the of the 3 faces of the cube and add them together. We get the following equation that gives us the total area \(A_\theta\) after a rotation \(\theta\) applied to the cube:</p>

\[A_\theta = |cos\theta_x*sin\theta_z| + |cos\theta_x*cos\theta_z| + |-sin\theta_x|\]

<p>Let’s plot a heatmap of this function with respect to \(\theta_x\) and \(\theta_z\):</p>

<center><img src="/assets/cubic-ufo/cubic-ufo-heatmap.svg" /></center>
<p><br /></p>

<h1 id="approach">Approach</h1>

<p>We would ideally like to find an analytical solution which would run in \(O(1)\), but notice that if we fix \(A\) and leave \(\theta_x\) and \(\theta_z\) variable, we have an <em>underdetermined problem</em>. One equation and two variables. One can also notice the same phenomenon in the heatmap shown above: there are multiple (in fact infinitely many) locations with the same color.</p>

<ul>
  <li>One global minimimum is located at \(\theta_x = 0\) and \(\theta_z = 0\)</li>
  <li>The global maximum is observed when \(\theta_z = 45\) and for some value of \(\theta_x\)</li>
  <li>Notice that the heatmap is not symmetric with respect to both variables.</li>
</ul>

<p>A path going from a global minimum to the global maximum observes all possible values along the way. The path in this case path would imply an extra constraint, which makes this problem determined. For analytical ease, we would like a follow two simple paths, as shown on on the heatmap with two arrows: horizontal and the vertical.</p>

<p><strong>In general, the idea is:</strong></p>
<ul>
  <li>When we are asked an \(A\) that is less than the value at the end of horizontal arrow:
    <ul>
      <li>Fix \(\theta_x\) to 0 degrees and solve analytically for \(\theta_z\).</li>
      <li>We calculated the analytical solution for this case as following:</li>
      <li>\(\theta_z = \frac{sin^{-1}(A^2-1)}{2}\)</li>
    </ul>
  </li>
  <li>Similarly, when we are asked an \(A\) that is greater than or equal to the value at the end of horizontal arrow:
    <ul>
      <li>Fix \(\theta_z\) to 45 degrees and solve analytically for \(\theta_x\).</li>
      <li>We calculated the analytical solution for this case as following:</li>
      <li>\(\theta_x = 2*tan^{-1} \left( \frac{\sqrt{3-A^2}+1}{A+\sqrt{2}} \right)\)</li>
    </ul>
  </li>
</ul>

<h1 id="implementation">Implementation</h1>

<p>The following is a C++ implementation of the approach mentioned.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Ans is a wrapper class to store answers
 * Case is a wrapper class to store cases
 */</span>

<span class="n">Ans</span> <span class="nf">solveCase</span><span class="p">(</span><span class="n">Case</span> <span class="o">&amp;</span><span class="n">cs</span><span class="p">){</span>
    <span class="n">Ans</span> <span class="n">ans</span><span class="p">;</span>

    <span class="kt">double</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>		<span class="c1">// theta_x (in radians)</span>
    <span class="kt">double</span> <span class="n">z</span> <span class="o">=</span> <span class="n">PI</span><span class="o">/</span><span class="mi">4</span><span class="p">;</span>		<span class="c1">// theta_z (in radians)</span>
    <span class="kt">double</span> <span class="n">thres</span> <span class="o">=</span> <span class="n">area</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">z</span><span class="p">);</span>	<span class="c1">// threshold area</span>
    
    <span class="k">if</span><span class="p">(</span><span class="n">cs</span><span class="p">.</span><span class="n">A</span> <span class="o">&lt;</span> <span class="n">thres</span><span class="p">){</span>
    	<span class="c1">// analytic soln for the points along horizontal arrow</span>
        <span class="n">z</span> <span class="o">=</span> <span class="n">asin</span><span class="p">(</span><span class="n">cs</span><span class="p">.</span><span class="n">A</span><span class="o">*</span><span class="n">cs</span><span class="p">.</span><span class="n">A</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> 
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    	<span class="c1">// analytic soln for the points along vertical arrow</span>
        <span class="kt">double</span> <span class="n">num</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">3</span><span class="o">-</span><span class="n">cs</span><span class="p">.</span><span class="n">A</span><span class="o">*</span><span class="n">cs</span><span class="p">.</span><span class="n">A</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
        <span class="kt">double</span> <span class="n">denom</span> <span class="o">=</span> <span class="n">cs</span><span class="p">.</span><span class="n">A</span> <span class="o">+</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
        <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">atan</span><span class="p">(</span><span class="n">num</span><span class="o">/</span><span class="n">denom</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="kt">double</span> <span class="n">angleX</span> <span class="o">=</span> <span class="n">rad2deg</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">angleZ</span> <span class="o">=</span> <span class="n">rad2deg</span><span class="p">(</span><span class="n">z</span><span class="p">);</span>    

    <span class="c1">// initialize face vectors</span>
    <span class="n">Point</span> <span class="nf">p1</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span>   <span class="mi">0</span><span class="p">,</span>   <span class="mi">0</span><span class="p">);</span>
    <span class="n">Point</span> <span class="nf">p2</span><span class="p">(</span>  <span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span>   <span class="mi">0</span><span class="p">);</span>
    <span class="n">Point</span> <span class="nf">p3</span><span class="p">(</span>  <span class="mi">0</span><span class="p">,</span>   <span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">);</span>

    <span class="c1">// rotate face vectors</span>
    <span class="n">ans</span><span class="p">.</span><span class="n">p1</span> <span class="o">=</span> <span class="n">rotate</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">p1</span><span class="p">);</span> 
    <span class="n">ans</span><span class="p">.</span><span class="n">p2</span> <span class="o">=</span> <span class="n">rotate</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">p2</span><span class="p">);</span>
    <span class="n">ans</span><span class="p">.</span><span class="n">p3</span> <span class="o">=</span> <span class="n">rotate</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">p3</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And the helper functions are defined as following:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="nf">area</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">z</span><span class="p">){</span>
    <span class="k">return</span> <span class="n">abs</span><span class="p">(</span><span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">sin</span><span class="p">(</span><span class="n">z</span><span class="p">))</span> <span class="o">+</span> <span class="n">abs</span><span class="p">(</span><span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">cos</span><span class="p">(</span><span class="n">z</span><span class="p">))</span> <span class="o">+</span> <span class="n">abs</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">));</span>
<span class="p">}</span>

<span class="n">Point</span> <span class="nf">rotate</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="kt">double</span> <span class="n">z</span><span class="p">,</span> <span class="n">Point</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">){</span>
    <span class="n">Point</span> <span class="n">pr</span><span class="p">;</span>
    <span class="n">pr</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">z</span><span class="p">)</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">z</span><span class="p">);</span>
    <span class="n">pr</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">z</span><span class="p">)</span> <span class="o">+</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">z</span><span class="p">)</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">z</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
    <span class="n">pr</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">z</span><span class="p">)</span> <span class="o">+</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">z</span><span class="p">)</span> <span class="o">+</span> <span class="n">p</span><span class="p">.</span><span class="n">z</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">pr</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="remarks">Remarks</h1>

<p>Math/geometry based problems are often encountered in programming contests. For this particular instance, we sought an analytical solution that comes with the benefit of the short implementation and runtime. The drawback of this approach is that we had to know/find the mathematical equalities and further notice the simplifying characteristics of those in order to hash out the final closed form equation on paper.</p>]]></content><author><name>Onur Eken</name></author><summary type="html"><![CDATA[Geometric problem from qualification round. Playing with rotation matrices.]]></summary></entry><entry><title type="html">Code Jam 2018: Go Gopher</title><link href="http://localhost:4000/go-gopher" rel="alternate" type="text/html" title="Code Jam 2018: Go Gopher" /><published>2018-04-10T00:00:00+02:00</published><updated>2018-04-10T00:00:00+02:00</updated><id>http://localhost:4000/go-gopher</id><content type="html" xml:base="http://localhost:4000/go-gopher"><![CDATA[<p class="info">Google Code Jam is an annual, international programming competition. Similar to ACM/ICPC but less restrictive since anyone who registers online can compete. Also the contest is not team based. It consists of several stages until its final onsite round. The very first stage qualification round recently took place.</p>

<p>I have checked the problems and proposed some solutions to those.</p>

<p><strong>Disclaimer</strong>: Proposed ideas and implementations are not official, ideal, nor coded optimally. Instead, this is only one way to tackle the problem. Feel free to contact me to feedback possible optimizations!</p>

<p><strong>Prerequisite</strong>: This explanation assumes that you are familiar with the terms, variables and the problem itself as defined on the official Code Jam <a href="https://codejam.withgoogle.com/2018/" target="_blank"><strong>page</strong></a>. If you have not read the problem description, please take your time and go through all of it.</p>

<h1 id="observations">Observations</h1>

<p>This is an interactive problem. I.e. submitted program exchanges information with judge server more than 1 time for each test case.</p>

<p>In this particular problem, what conditions would cause a submission to fail?</p>
<ul>
  <li>When Gopher is deployed 1000 times, yet a solution is not found.</li>
  <li>It takes more than 20 seconds to deploy the Gopher 1000 times.</li>
</ul>

<p>Therefore, our <em>hypothetical ideal approach</em> should:</p>
<ol>
  <li>Not need to deploy Gopher more than 1000 times to construct the rectangle.</li>
  <li>Have a <em>fast</em> procedure to decide where to deploy the Gopher.</li>
</ol>

<p>The first condition depends on <code class="language-plaintext highlighter-rouge">A</code>, the size of the rectangle to construct. For instance when <code class="language-plaintext highlighter-rouge">A</code> \(&gt;1000\), it is not possible to construct the rectangle at all. Since the process is stochastic, probability of successfully constructing a rectangle of size <code class="language-plaintext highlighter-rouge">A</code> raises as <code class="language-plaintext highlighter-rouge">A</code> gets smaller.</p>

<p>Luckily, <code class="language-plaintext highlighter-rouge">A = 20</code> and <code class="language-plaintext highlighter-rouge">A = 200</code> in the visible and hidden test sets respectively. Not too demanding and tolerating for <em>algorithms that follow non-optimal strategies</em>.</p>

<h1 id="approach">Approach</h1>

<p>Although there are many possible strategies to tackle this problem, for simplicity and the ease of imlementation, let’s consider an approach where we:</p>
<ul>
  <li>Choose to construct a rectangle of size \(RxC\), whose top left cell is located at \((1,1)\) and \(RxC \geq A \)</li>
  <li>\(R\) denoting the number of rows</li>
  <li>\(C\) denoting the number of columns</li>
  <li>Define <em>inner</em> cell as the non-border cells of our rectangle.</li>
  <li>Deploy the Gopher <strong>only</strong> in the <em>inner</em> cells. In other words, do not risk to prepare any cell landing outside of our rectangle.
    <ul>
      <li>In this case, we do not need to worry about bulges.</li>
      <li>Downside of this is, it gets more likely to prepare a cell that is already prepared. Which means a <em>wasted deployment</em>. Recall that we have only 1000 of them.</li>
    </ul>
  </li>
  <li>To mitigate the problem of <em>wasted deployment</em>, we would like to deploy the Gopher to a cell, where the neighbourhood of the cell (surrounding 9 cells) has the largest number of <em>unprepared cells</em>. Increasing the chance of preparing an <em>unprepared</em> cell.</li>
  <li>In addition, we would like the size of our rectangle \(RxC\) as close as possible to <code class="language-plaintext highlighter-rouge">A</code>. Otherwise Gopher would be doing extra <em>unnecessary work</em>, that would require more deployments.</li>
</ul>

<p>Notice that with this approach we need to store:</p>

<ol>
  <li>Which of the cells are prepared</li>
  <li>Number of unprepared cells in the neighbourhood of each <em>inner</em> cell</li>
</ol>

<p>When it is time to deploy the Gopher, simply search through the <em>inner</em> cells, and find the best candidate. One might notice another optimization here to decrease search time (this is about the 2nd constraint mentioned in <strong>Observations</strong>). We could decrease search time by reducing the number of inner cells to search through.</p>

<p>Is there a way to minimize the number of <em>inner</em> cells?<br />
<strong>Yes</strong>. Given three positive real numbers \(x,y,z\) and the equality \(xy=z\), \( x+y \) is minimal when \(x=1\) and \(y=z\) or vice versa.</p>

<p>In our case, \(R\) (or \(C\)) can not be smaller than 3. Therefore, fix \(R = 3\) and let \(C = \lceil \frac{A}{3} \rceil  \). One benefit of this choice is that the number of <em>unnecessary</em> cells in our rectangle could be at most 2.</p>

<p>So basically, our rectangle will be an horizontal strip. One more thing to consider is:<br />
Will this strip fit in the 1000x1000 garden?<br />
We are lucky about this. If <code class="language-plaintext highlighter-rouge">A</code> would exceed 3000 then the strip would be too long, but that is not that case in any of the test sets.</p>

<p>See below, the illustration of this approach. Green is the target rectangle and the dots represent <em>inner cells</em> to deploy the Gopher to. We will have \(C-2\) of them  according to our approach.</p>

<center><img src="/assets/go-gopher/go-gopher-approach.svg" style="margin-right:80px" /></center>
<p><br /></p>

<p>On the high level, the method works as the following:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>R = 3
C = ceil(A/3)
unprepared = 2d array of size [R,C], with values 1
unpreparedCount = array of size [C-2], with values 9
outputCell(unpreparedCount)
answerCell = receiveAnswer()
while(rectangle not completed AND answerCell is not fail){
    update(unprepared, unpreparedCount, answerCell)
    outputCell(unpreparedCount)
    answerCell = receiveAnswer()
}
</code></pre></div></div>

<h1 id="implementation">Implementation</h1>

<p>The following is a C++ implementation of the approach mentioned.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">vint</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">;</span>
<span class="k">using</span> <span class="n">vvint</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vint</span><span class="o">&gt;</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">solveCase</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">A</span><span class="p">;</span> <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">A</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">A</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="o">%</span><span class="mi">3</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span> <span class="n">cols</span><span class="o">++</span><span class="p">;</span>
    <span class="n">vint</span> <span class="n">freeCount</span><span class="p">(</span><span class="n">cols</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
    <span class="n">vvint</span> <span class="n">free</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">vint</span><span class="p">(</span><span class="n">cols</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>

    <span class="n">Pos</span> <span class="n">p</span><span class="p">;</span> <span class="c1">// pos we send</span>
    <span class="n">Pos</span> <span class="n">a</span><span class="p">;</span> <span class="c1">// pos we receive</span>

    <span class="n">p</span> <span class="o">=</span> <span class="n">getNext</span><span class="p">(</span><span class="n">freeCount</span><span class="p">);</span>
    <span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">();</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">Pos</span><span class="o">::</span><span class="n">receive</span><span class="p">();</span>

    <span class="k">while</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">legit</span><span class="p">()){</span>
        <span class="n">updateFree</span><span class="p">(</span><span class="n">freeCount</span><span class="p">,</span> <span class="n">free</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">getNext</span><span class="p">(</span><span class="n">freeCount</span><span class="p">);</span>
        <span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">();</span>
        <span class="n">a</span> <span class="o">=</span> <span class="n">Pos</span><span class="o">::</span><span class="n">receive</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The functionality of <code class="language-plaintext highlighter-rouge">getNext()</code> and <code class="language-plaintext highlighter-rouge">updateFree()</code> could be also implemented using a heap equipped with a custom comparator and a custom <code class="language-plaintext highlighter-rouge">decreaseKey()</code> operation, but again, under the given constraints, it makes sense to go with this easier to implement but slower, pair of functions.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Pos</span> <span class="nf">getNext</span><span class="p">(</span><span class="n">vint</span><span class="o">&amp;</span> <span class="n">freeCount</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">maxFree</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">maxI</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">freeCount</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">freeCount</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;</span><span class="n">maxFree</span><span class="p">){</span>
            <span class="n">maxFree</span> <span class="o">=</span> <span class="n">freeCount</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="n">maxI</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">Pos</span> <span class="n">p</span><span class="p">;</span>
    <span class="n">p</span><span class="p">.</span><span class="n">r</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">p</span><span class="p">.</span><span class="n">c</span> <span class="o">=</span> <span class="n">maxI</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>When implementing the following function some of the things to pay attention are:</p>
<ul>
  <li>Update arrays only if prepared a previously <em>unprepared cell</em></li>
  <li>Neighbourhoods will share some of it’s cells with other neighbourhoods
    <ul>
      <li>Decrement counts taking this into consideration</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">updateFree</span><span class="p">(</span><span class="n">vint</span><span class="o">&amp;</span> <span class="n">freeCount</span><span class="p">,</span> <span class="n">vvint</span><span class="o">&amp;</span> <span class="n">free</span><span class="p">,</span> <span class="n">Pos</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">free</span><span class="p">[</span><span class="n">a</span><span class="p">.</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">a</span><span class="p">.</span><span class="n">c</span><span class="o">-</span><span class="mi">1</span><span class="p">]){</span>
        <span class="n">free</span><span class="p">[</span><span class="n">a</span><span class="p">.</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">a</span><span class="p">.</span><span class="n">c</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// not free anymore</span>
        <span class="kt">int</span> <span class="n">onMidOf</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">c</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">onRightOf</span> <span class="o">=</span> <span class="n">onMidOf</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">onLeftOf</span> <span class="o">=</span> <span class="n">onMidOf</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">onMidOf</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">onMidOf</span> <span class="o">&lt;</span> <span class="n">freeCount</span><span class="p">.</span><span class="n">size</span><span class="p">()){</span>
            <span class="n">freeCount</span><span class="p">[</span><span class="n">onMidOf</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">onRightOf</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">onRightOf</span> <span class="o">&lt;</span> <span class="n">freeCount</span><span class="p">.</span><span class="n">size</span><span class="p">()){</span>
            <span class="n">freeCount</span><span class="p">[</span><span class="n">onRightOf</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">onLeftOf</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">onLeftOf</span> <span class="o">&lt;</span> <span class="n">freeCount</span><span class="p">.</span><span class="n">size</span><span class="p">()){</span>
            <span class="n">freeCount</span><span class="p">[</span><span class="n">onLeftOf</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The class used to represent a position (a.k.a. cell) is implemented as follows:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">Pos</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">r</span><span class="p">,</span><span class="n">c</span><span class="p">;</span>
    <span class="kt">void</span> <span class="n">send</span><span class="p">(){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">r</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">flush</span> <span class="p">;</span>
    <span class="p">}</span>
    <span class="k">static</span> <span class="n">Pos</span> <span class="nf">receive</span><span class="p">(){</span>
        <span class="n">Pos</span> <span class="n">p</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">r</span> <span class="o">&gt;&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">c</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">bool</span> <span class="nf">legit</span><span class="p">(){</span>
        <span class="k">return</span> <span class="n">r</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<h1 id="remarks">Remarks</h1>

<p>This is an interesting and an unconventional problem in this kind of contests. We had to be able to compute rough expectations under a stochastic process and minimize it. In addition, we had to find a way to generate an answer in each turn in a reasonable time which is an implementation-wise concern. The code we provided is not very concise but rather modular and intuitive.</p>]]></content><author><name>Onur Eken</name></author><summary type="html"><![CDATA[An interactive problem with stochastic process.]]></summary></entry><entry><title type="html">Code Jam 2018: Trouble Sort</title><link href="http://localhost:4000/trouble-sort" rel="alternate" type="text/html" title="Code Jam 2018: Trouble Sort" /><published>2018-04-09T00:00:00+02:00</published><updated>2018-04-09T00:00:00+02:00</updated><id>http://localhost:4000/trouble-sort</id><content type="html" xml:base="http://localhost:4000/trouble-sort"><![CDATA[<p class="info">Google Code Jam is an annual, international programming competition. Similar to ACM/ICPC but less restrictive since anyone who registers online can compete. Also the contest is not team based. It consists of several stages until its final onsite round. The very first stage qualification round recently took place.</p>

<p>I have checked the problems and proposed some solutions to those.</p>

<p><strong>Disclaimer</strong>: Proposed ideas and implementations are not official, ideal, nor coded optimally. Instead, this is only one way to tackle the problem. Feel free to contact me to feedback possible optimizations!</p>

<p><strong>Prerequisite</strong>: This explanation assumes that you are familiar with the terms, variables and the problem itself as defined on the official Code Jam <a href="https://codejam.withgoogle.com/2018/" target="_blank"><strong>page</strong></a>. If you have not read the problem description, please take your time and go through all of it.</p>

<h1 id="rudimentary-approach">Rudimentary Approach</h1>

<p>Before highlighting any observations, the most rudimentary approach looks tempting:</p>

<ul>
  <li>Run the trouble sort</li>
  <li>Pass over the array to detect an <em>anomaly</em></li>
  <li>If there is no <em>anomaly</em> then output <code class="language-plaintext highlighter-rouge">OK</code></li>
  <li>Otherwise, output index of <em>anomaly</em></li>
</ul>

<p>What deters one from doing this is the <strong>constraint</strong> on the <em>Hidden Test Set</em>: \(3 \leq N \leq 10^5\). We know that the average and the worst-case performance of bubble sort is \(O(n^2)\). See some assumptions, and deductions below:</p>

<ul>
  <li>Assume 1 B instructions on a <em>regular machine</em> run in 1 second</li>
  <li>Assume that the computation power allocated for a submission on Google Code Jam judge server is in the order of a <em>regular machine</em></li>
  <li>Assume trouble sort has the same average and worst-case complexity as bubble sort.</li>
</ul>

<p>Then trouble sort requires \(10^{10}\) operations to execute, which would take ~10 seconds on Google Code Jam judge server (for a single large test case). If, we have more than a few such large test cases, it is nearly certain that this approach will not pass <em>Hidden Test Set</em>.</p>

<h1 id="observations">Observations</h1>

<p>The crucial detail in trouble sort is that:</p>

<ul>
  <li>It compares and sorts the values at <em>even</em> indices among themselves.</li>
  <li>It compares and sorts the values at <em>odd</em> indices among themselves.</li>
</ul>

<p>Thus, even though trouble sort works on a single array, it sorts two different parts of the array <em>independently</em>. It is possible that when these two arrays are interleaved they may not form a sorted array.</p>

<h1 id="approach">Approach</h1>

<p>We know we could perform sorting in \(O(n \log{n})\). Therefore, the idea is:</p>
<ul>
  <li>Extract the <em>even</em> array from the original array and sort it in \(O(n \log{n})\).</li>
  <li>Extract the <em>odd</em> array from the original array and sort it in \(O(n \log{n})\).</li>
  <li>Make a pass through both arrays in an alternating manner and detect if there is an <em>anomaly</em>.</li>
</ul>

<h1 id="implementation">Implementation</h1>

<p>The following is a C++ implementation of the approach mentioned.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Ans is a wrapper class to store answers
 * Case is a wrapper class to store cases
 */</span>

<span class="k">using</span> <span class="n">vlong</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;</span><span class="p">;</span>

<span class="n">Ans</span> <span class="nf">solveCase</span><span class="p">(</span><span class="n">Case</span> <span class="o">&amp;</span><span class="n">cs</span><span class="p">){</span>
    <span class="n">Ans</span> <span class="n">ans</span><span class="p">;</span>
    <span class="n">ans</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="c1">// -1 indicates 'no anomaly', assume initially</span>

    <span class="n">vlong</span> <span class="n">even</span><span class="p">;</span>
    <span class="n">vlong</span> <span class="n">odd</span><span class="p">;</span>
    <span class="n">extract</span><span class="p">(</span><span class="n">cs</span><span class="p">,</span> <span class="n">even</span><span class="p">,</span> <span class="n">odd</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">odd</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">// the alternating pass</span>
        <span class="k">if</span><span class="p">(</span><span class="n">odd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;</span><span class="n">even</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">even</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">even</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;</span><span class="n">odd</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>            
            <span class="n">ans</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Notice that the odd array could be 1 element shorter then the even array. When they are of equal length, we have an irregularity in the comparison pattern. See the following figure, for the demonstration of what the for loop does in this code.</p>

<center><img src="/assets/trouble-sort/trouble-sort-arrays.svg" /></center>
<p><br /></p>

<p>The last piece of this implementation is the following straightforward function to extract the <em>even</em> and <em>odd</em> arrays.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">extract</span><span class="p">(</span><span class="n">Case</span> <span class="o">&amp;</span><span class="n">cs</span><span class="p">,</span> <span class="n">vlong</span><span class="o">&amp;</span> <span class="n">even</span><span class="p">,</span> <span class="n">vlong</span><span class="o">&amp;</span> <span class="n">odd</span><span class="p">){</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cs</span><span class="p">.</span><span class="n">V</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="p">){</span>
            <span class="n">odd</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cs</span><span class="p">.</span><span class="n">V</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="n">even</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">cs</span><span class="p">.</span><span class="n">V</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">even</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">even</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">odd</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">odd</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="remarks-and-improvements">Remarks and Improvements</h1>

<p>With this implementation, we require auxiliary space and a tedious alternating pass to detect an anomaly. A more elegant way of performing this would be:</p>
<ul>
  <li>Instead of extracting <em>even</em> and <em>odd</em> arrays, use two custom iterators on the original array that visits <em>even</em> and <em>odd</em> indices respectively to sort.</li>
  <li>By doing so, we require no auxiliary space and the anomaly detection would be a simpler procedure.</li>
</ul>]]></content><author><name>Onur Eken</name></author><summary type="html"><![CDATA[Bubble sort: done wrong.]]></summary></entry></feed>